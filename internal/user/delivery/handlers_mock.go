// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package delivery is a generated GoMock package.
package delivery

import (
	context "context"
	reflect "reflect"

	user "github.com/go-petr/pet-bank/internal/user"
	gomock "github.com/golang/mock/gomock"
)

// MockuserServiceInterface is a mock of userServiceInterface interface.
type MockuserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceInterfaceMockRecorder
}

// MockuserServiceInterfaceMockRecorder is the mock recorder for MockuserServiceInterface.
type MockuserServiceInterfaceMockRecorder struct {
	mock *MockuserServiceInterface
}

// NewMockuserServiceInterface creates a new mock instance.
func NewMockuserServiceInterface(ctrl *gomock.Controller) *MockuserServiceInterface {
	mock := &MockuserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockuserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserServiceInterface) EXPECT() *MockuserServiceInterfaceMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockuserServiceInterface) CheckPassword(ctx context.Context, username, password string) (user.UserWihtoutPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", ctx, username, password)
	ret0, _ := ret[0].(user.UserWihtoutPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockuserServiceInterfaceMockRecorder) CheckPassword(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockuserServiceInterface)(nil).CheckPassword), ctx, username, password)
}

// CreateUser mocks base method.
func (m *MockuserServiceInterface) CreateUser(ctx context.Context, username, password, fullname, email string) (user.UserWihtoutPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username, password, fullname, email)
	ret0, _ := ret[0].(user.UserWihtoutPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockuserServiceInterfaceMockRecorder) CreateUser(ctx, username, password, fullname, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockuserServiceInterface)(nil).CreateUser), ctx, username, password, fullname, email)
}
