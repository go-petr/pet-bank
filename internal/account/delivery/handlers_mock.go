// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package delivery is a generated GoMock package.
package delivery

import (
	context "context"
	reflect "reflect"

	domain "github.com/go-petr/pet-bank/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountServiceInterface is a mock of AccountServiceInterface interface.
type MockAccountServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceInterfaceMockRecorder
}

// MockAccountServiceInterfaceMockRecorder is the mock recorder for MockAccountServiceInterface.
type MockAccountServiceInterfaceMockRecorder struct {
	mock *MockAccountServiceInterface
}

// NewMockAccountServiceInterface creates a new mock instance.
func NewMockAccountServiceInterface(ctrl *gomock.Controller) *MockAccountServiceInterface {
	mock := &MockAccountServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAccountServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountServiceInterface) EXPECT() *MockAccountServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountServiceInterface) CreateAccount(ctx context.Context, owner, currency string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, owner, currency)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountServiceInterfaceMockRecorder) CreateAccount(ctx, owner, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountServiceInterface)(nil).CreateAccount), ctx, owner, currency)
}

// GetAccount mocks base method.
func (m *MockAccountServiceInterface) GetAccount(ctx context.Context, id int32) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, id)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountServiceInterfaceMockRecorder) GetAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountServiceInterface)(nil).GetAccount), ctx, id)
}

// ListAccounts mocks base method.
func (m *MockAccountServiceInterface) ListAccounts(ctx context.Context, owner string, pageSize, pageID int32) ([]domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, owner, pageSize, pageID)
	ret0, _ := ret[0].([]domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockAccountServiceInterfaceMockRecorder) ListAccounts(ctx, owner, pageSize, pageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockAccountServiceInterface)(nil).ListAccounts), ctx, owner, pageSize, pageID)
}
