// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package delivery is a generated GoMock package.
package delivery

import (
	context "context"
	reflect "reflect"

	account "github.com/go-petr/pet-bank/internal/account"
	gomock "github.com/golang/mock/gomock"
)

// MockaccountServiceInterface is a mock of accountServiceInterface interface.
type MockaccountServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockaccountServiceInterfaceMockRecorder
}

// MockaccountServiceInterfaceMockRecorder is the mock recorder for MockaccountServiceInterface.
type MockaccountServiceInterfaceMockRecorder struct {
	mock *MockaccountServiceInterface
}

// NewMockaccountServiceInterface creates a new mock instance.
func NewMockaccountServiceInterface(ctrl *gomock.Controller) *MockaccountServiceInterface {
	mock := &MockaccountServiceInterface{ctrl: ctrl}
	mock.recorder = &MockaccountServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountServiceInterface) EXPECT() *MockaccountServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockaccountServiceInterface) CreateAccount(ctx context.Context, owner, currency string) (account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, owner, currency)
	ret0, _ := ret[0].(account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockaccountServiceInterfaceMockRecorder) CreateAccount(ctx, owner, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockaccountServiceInterface)(nil).CreateAccount), ctx, owner, currency)
}

// GetAccount mocks base method.
func (m *MockaccountServiceInterface) GetAccount(ctx context.Context, id int32) (account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, id)
	ret0, _ := ret[0].(account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockaccountServiceInterfaceMockRecorder) GetAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockaccountServiceInterface)(nil).GetAccount), ctx, id)
}

// ListAccounts mocks base method.
func (m *MockaccountServiceInterface) ListAccounts(ctx context.Context, owner string, pageSize, pageID int32) ([]account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx, owner, pageSize, pageID)
	ret0, _ := ret[0].([]account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockaccountServiceInterfaceMockRecorder) ListAccounts(ctx, owner, pageSize, pageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockaccountServiceInterface)(nil).ListAccounts), ctx, owner, pageSize, pageID)
}
