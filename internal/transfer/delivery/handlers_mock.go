// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package delivery is a generated GoMock package.
package delivery

import (
	context "context"
	reflect "reflect"

	domain "github.com/go-petr/pet-bank/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MocktransferServiceInterface is a mock of transferServiceInterface interface.
type MocktransferServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MocktransferServiceInterfaceMockRecorder
}

// MocktransferServiceInterfaceMockRecorder is the mock recorder for MocktransferServiceInterface.
type MocktransferServiceInterfaceMockRecorder struct {
	mock *MocktransferServiceInterface
}

// NewMocktransferServiceInterface creates a new mock instance.
func NewMocktransferServiceInterface(ctrl *gomock.Controller) *MocktransferServiceInterface {
	mock := &MocktransferServiceInterface{ctrl: ctrl}
	mock.recorder = &MocktransferServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransferServiceInterface) EXPECT() *MocktransferServiceInterfaceMockRecorder {
	return m.recorder
}

// TransferTx mocks base method.
func (m *MocktransferServiceInterface) TransferTx(ctx context.Context, fromUsername string, arg domain.CreateTransferParams) (domain.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", ctx, fromUsername, arg)
	ret0, _ := ret[0].(domain.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MocktransferServiceInterfaceMockRecorder) TransferTx(ctx, fromUsername, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MocktransferServiceInterface)(nil).TransferTx), ctx, fromUsername, arg)
}
